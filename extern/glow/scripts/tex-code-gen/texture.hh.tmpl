// This file is auto-generated and should not be modified directly.
\#pragma once

\#include "Texture.hh"

\#include "glow/common/gltypeinfo.hh"
\#include "glow/common/nodiscard.hh"
\#include "glow/common/log.hh"

\#include "glow/data/ColorSpace.hh"

\#include <vector>

\#include <glm/vec2.hpp>
\#include <glm/vec3.hpp>
\#include <glm/vec4.hpp>

namespace glow
{
GLOW_SHARED(class, $class);
GLOW_SHARED(class, TextureData);

/// Defines $shortdesc in OpenGL
class $class final : public Texture
{
public:
    struct Bound$class;

#if $storageDim == 1
    using SizeT = int;
#else
    using SizeT = glm::ivec$storageDim;
#end if

    struct Shape
    {
        GLenum format;
        SizeT size;
#if $isMultisample
        int samples;
#end if
#if $hasMipmaps and $hasImmutable
        int immutableMipmaps; ///< Amount of fixed mipmaps, -1 if the texture is not immutable. This parameter is only respected in ::createStorageImmutable
#end if

        inline bool operator==(Shape const& rhs) const
        {
            return (format == rhs.format) && (size == rhs.size)#if $isMultisample# && (samples == rhs.samples)#end if##if $hasMipmaps and $hasImmutable# && (immutableMipmaps == rhs.immutableMipmaps)#end if#;
        }
    };

private:

#if $hasTexParams
    /// Minification filter
    GLenum mMinFilter = $defaultMinFilter;
    /// Magnification filter
    GLenum mMagFilter = GL_LINEAR;

    /// Border color
    glm::vec4 mBorderColor = {0.0f, 0.0f, 0.0f, 0.0f};

#for $C in $texCoords
    /// Wrapping in $C
    GLenum mWrap$C = $defaultWrap;
#end for

#if $hasDepthTexture
    /// Comparison mode
    GLenum mCompareMode = GL_NONE;
    /// Comparison function
    GLenum mCompareFunc = GL_LESS;

    /// Depth/Stencil read mode
    GLenum mDepthStencilMode = GL_DEPTH_COMPONENT;
#end if

    /// Level of anisotropic filtering (>= 1.f, which is isotropic)
    /// Max number of samples basically
    GLfloat mAnisotropicFiltering = 1.0f;
#end if

#for $S in $sizeMember
    /// Texture size: $S
    int m$S = 0u;
#end for

#if $hasMipmaps
    /// True iff mipmaps are generated since last data upload
    bool mMipmapsGenerated = false;

    /// LOD bias
    float mLodBias = 0.0f;
    /// Mipmap base level
    int mBaseLevel = 0;
    /// Mipmap max level
    int mMaxLevel = 1000;
    /// Mipmap min lod
    float mMinLod = -1000.0f;
    /// Mipmap max lod
    float mMaxLod = 1000.0f;
#end if

#if $isMultisample
    /// Level of multisampling
    int mSampleAmount = 4;
    /// Whether to use identical sample locations and -amounts for all texels
    GLboolean mFixedSamples = GL_FALSE;
#end if

#if $hasImmutable
    /// if true, this texture got immutable storage by glTexStorage2D
    bool mStorageImmutable = false;
    #if $hasMipmaps
    /// Amount of fixed mipmaps, -1 if this texture does not have immutable storage
    int mImmutableMipmaps = -1;
    #end if
#end if

public: // getter
    /// Gets the currently bound texture (nullptr if none)
    static Bound$class* getCurrentTexture();

#if $hasTexParams
    GLenum getMinFilter() const { return mMinFilter; }
    GLenum getMagFilter() const { return mMagFilter; }
    glm::vec4 getBorderColor() const { return mBorderColor; }
#for $C in $texCoords
    GLenum getWrap${C}() const { return mWrap$C; }
#end for
#if $hasDepthTexture
    GLenum getCompareMode() const { return mCompareMode; }
    GLenum getCompareFunc() const { return mCompareFunc; }
    GLenum getDepthStencilMode() const { return mDepthStencilMode; }
#end if
#end if
#for $S in $sizeMember
    int get${S}() const { return m${S}; }
#end for
    glm::ivec3 getDimensions() const override { return { $dimCall }; }
#if $storageDim > 1
    SizeT getSize() const { return { $sizeMemberCall }; }
#end if
    
    Shape getShape() const { return { mInternalFormat, #if $storageDim > 1#getSize()#else#$sizeMemberCall#end if##if $isMultisample#, mSampleAmount#end if##if $hasImmutable and $hasMipmaps#, mImmutableMipmaps#end if# }; }

#if $hasImmutable
    bool isStorageImmutable() const override { return mStorageImmutable; }
#end if

#if $hasMipmaps
    /// returns true iff mipmaps are used (based on min filter)
    bool hasMipmapsEnabled() const override;
    /// returns true iff mipmaps were generated via bind().generateMipmaps() (and are still valid)
    bool areMipmapsGenerated() const override { return mMipmapsGenerated; }
    /// Manually sets the internal flag if mipmaps were generated
    /// CAUTION: this should only be used if you modified the mipmap status manually (e.g. via glGenerateMipmaps)
    void setMipmapsGenerated(bool areGenerated) override { mMipmapsGenerated = areGenerated; }

    float getLodBias() const { return mLodBias; }
    int getBaseLevel() const { return mBaseLevel; }
    int getMaxLevel() const { return mMaxLevel; }
    float getMinLod() const { return mMinLod; }
    float getMaxLod() const { return mMaxLod; }
#end if

#if $isMultisample
    int getSampleAmount() const { return mSampleAmount; }
    GLboolean hasFixedSamples() const { return mFixedSamples; }
#end if

    /// returns the uniform type that should be used for sampling this texture
    GLenum getUniformType() const override;

public:
    /// RAII-object that defines a "bind"-scope for $shortdesc
    /// All functions that operate on the currently bound tex are accessed here
    struct Bound$class
    {
        GLOW_RAII_CLASS(Bound$class);

        /// Backreference to the texture
        $class* const texture;

#if $hasImmutable
        /// Makes the storage of this texture immutable
        /// It is an error to call this more than once
        /// It is an error to upload data with a different internal format at a later point
        /// It is an error to resize after storage was made immutable (unless it's the same size)
        /// Invalidates previously uploaded data
#if $hasMipmaps
        /// If mipmapLevels is <= 0, log2(max(${sizeParameterCall})) + 1 is used
#end if
    #if $isMultisample
        void makeStorageImmutable(${sizeParameter}, GLenum internalFormat, int samples = 4, GLboolean fixedSamples = GL_FALSE);
    #else
        void makeStorageImmutable(${sizeParameter}, GLenum internalFormat#if $hasMipmaps#, int mipmapLevels = 0#end if#);
    #end if
#end if

#if $hasTexParams
        /// Sets minification filter (GL_NEAREST, GL_LINEAR#if $hasMipmaps#, GL_NEAREST_MIPMAP_NEAREST, ..., GL_LINEAR_MIPMAP_LINEAR#end if #)
        void setMinFilter(GLenum filter);
        /// Sets magnification filter (GL_NEAREST, GL_LINEAR)
        void setMagFilter(GLenum filter);
        /// Sets mag and min filter
        void setFilter(GLenum magFilter, GLenum minFilter);

        /// Sets the number of anisotropic samples (>= 1)
        void setAnisotropicFiltering(GLfloat samples);

        /// Sets the border color
        void setBorderColor(glm::vec4 const& color);

#for $C in $texCoords
        /// Sets texture wrapping in $C
        void setWrap${C}(GLenum wrap);
#end for
        /// Sets texture wrapping in all directions
        void setWrap(#echo ", ".join(["GLenum wrap" + C for C in $texCoords]) #);
#end if

#if $hasDepthTexture
        /// Sets the texture compare mode (must be enabled for shadow samplers)
        /// Valid values: GL_COMPARE_REF_TO_TEXTURE and GL_NONE
        void setCompareMode(GLenum mode);
        /// Sets the function for comparison (LESS, LEQUAL, ...)
        void setCompareFunc(GLenum func);
        /// Sets the depth/stencil texture mode (GL_DEPTH_COMPONENT or GL_STENCIL_COMPONENT)
        void setDepthStencilMode(GLenum mode);
#end if

#if $hasMipmaps
        /// Generates mipmaps for this texture
        void generateMipmaps();

        /// Sets the bias (offset) for LOD
        void setLodBias(float bias);
        /// Sets the finest uploaded mip level
        void setBaseLevel(int lvl);
        /// Sets the coarsest uploaded mip level
        void setMaxLevel(int lvl);
        /// Sets the smallest lod value that should be used by texture(...)
        void setMinLod(float lvl);
        /// Sets the largest lod value that should be used by texture(...)
        void setMaxLod(float lvl);
#end if

        /// Resizes the texture
        /// invalidates the data
#if $isMultisample
        void resize(${sizeParameter}, int samples = 4, GLboolean fixedSamples = GL_FALSE);
    #if $storageDim > 1
        void resize(SizeT size, int samples = 4, GLboolean fixedSamples = GL_FALSE) { resize($sizeExpandCall, samples, fixedSamples); }
    #end if
#else
        void resize(${sizeParameter});
    #if $storageDim > 1
        void resize(SizeT size) { resize($sizeExpandCall); }
    #end if
#end if

#if $isMultisample
        /// Sets the multisampling properties
        /// Invalidates the data
        void setMultisampling(int samples, GLboolean fixedSamples);
        void setSampleAmount(int samples) { setMultisampling(samples, texture->mFixedSamples); }
        void setFixedSamples(GLboolean fixedSamples) { setMultisampling(texture->mSampleAmount, fixedSamples); }
#end if

#if not $isMultisample
        /// Generic data uploads
        /// Changes internal format, ${sizeParameterCall}, and data
        void setData(GLenum internalFormat#if $cubemap #, GLenum target#end if #, ${sizeParameter}, GLenum format, GLenum type, const GLvoid* data#if $hasMipmaps #, int mipmapLevel = 0#end if #);
        /// Data upload via glm or c++ type (see gltypeinfo)
        template <typename DataT>
        void setData(GLenum internalFormat#if $cubemap #, GLenum target#end if #, ${sizeParameter}, std::vector<DataT> const& data#if $hasMipmaps #, int mipmapLevel = 0#end if #)
        {
            if ((int)data.size() != #echo " * ".join($sizeVars)#)
            {
                error() << "Texture size is " << #echo ' << " x " << '.join($sizeVars)# << " = " << #echo " * ".join($sizeVars)# << " but " << data.size()
                        << " pixels are provided. " << to_string(texture);
                return;
            }
            setData(internalFormat#if $cubemap #, target#end if #, ${sizeParameterCall}, glTypeOf<DataT>::format, glTypeOf<DataT>::type, data.data()#if $hasMipmaps #, mipmapLevel#end if #);
        }
        /// Same as above
        /// Usage:
        ///   glm::vec3 texData[] = { ... }
        ///   setData(iFormat, ${sizeParameterCall}, texData);
        template <typename DataT, std::size_t N>
        void setData(GLenum internalFormat#if $cubemap #, GLenum target#end if #, ${sizeParameter}, const DataT(&data)[N]#if $hasMipmaps #, int mipmapLevel = 0#end if #)
        {
            if (N != #echo " * ".join($sizeVars)#)
            {
                error() << "Texture size is " << #echo ' << " x " << '.join($sizeVars)# << " = " << #echo " * ".join($sizeVars)# << " but " << N
                        << " pixels are provided. " << to_string(texture);
                return;
            }
            setData(internalFormat#if $cubemap #, target#end if #, ${sizeParameterCall}, glTypeOf<DataT>::format, glTypeOf<DataT>::type, data#if $hasMipmaps #, mipmapLevel#end if #);
        }
        /// Same as above
        /// Usage:
        ///   glm::vec3 texData[][] = { ... }
        ///   // it's #echo "".join(["[" + P + "]" for P in $sizeVarsReverse])#
        ///   setData(iFormat, texData);
        template <typename DataT, $sizeParameter>
        void setData(GLenum internalFormat#if $cubemap #, GLenum target#end if #, const DataT(&data)#echo "".join(["[" + P + "]" for P in $sizeVarsReverse])# #if $hasMipmaps #, int mipmapLevel = 0#end if #)
        {
            setData(internalFormat#if $cubemap #, target#end if #, ${sizeParameterCall}, glTypeOf<DataT>::format, glTypeOf<DataT>::type, data#if $hasMipmaps #, mipmapLevel#end if #);
        }

        /// Generic partial data uploads
        /// Only changes data. Offset and size must be inside original bounds.
        void setSubData(#if $cubemap #GLenum target, #end if #${offsetParameter}, ${sizeParameter}, GLenum format, GLenum type, const GLvoid* data#if $hasMipmaps #, int mipmapLevel = 0#end if #);
        /// Partial data upload via glm or c++ type (see gltypeinfo)
        template <typename DataT>
        void setSubData(#if $cubemap #GLenum target, #end if #${offsetParameter}, ${sizeParameter}, std::vector<DataT> const& data#if $hasMipmaps #, int mipmapLevel = 0#end if #)
        {
            if ((int)data.size() != #echo " * ".join($sizeVars)#)
            {
                error() << "Texture size is " << #echo ' << " x " << '.join($sizeVars)# << " = " << #echo " * ".join($sizeVars)# << " but " << data.size()
                        << " pixels are provided. " << to_string(texture);
                return;
            }
            setSubData(#if $cubemap #target, #end if #${offsetParameterCall}, ${sizeParameterCall}, glTypeOf<DataT>::format, glTypeOf<DataT>::type, data.data()#if $hasMipmaps #, mipmapLevel#end if #);
        }
        /// Same as above
        /// Usage:
        ///   glm::vec3 texData[] = { ... }
        ///   setSubData(${offsetParameterCall}, ${sizeParameterCall}, texData);
        template <typename DataT, std::size_t N>
        void setSubData(#if $cubemap #GLenum target, #end if #${offsetParameter}, ${sizeParameter}, const DataT(&data)[N]#if $hasMipmaps #, int mipmapLevel = 0#end if #)
        {
            if (N != #echo " * ".join($sizeVars)#)
            {
                error() << "Texture size is " << #echo ' << " x " << '.join($sizeVars)# << " = " << #echo " * ".join($sizeVars)# << " but " << N
                        << " pixels are provided. " << to_string(texture);
                return;
            }
            setSubData(#if $cubemap #target, #end if #${offsetParameterCall}, ${sizeParameterCall}, glTypeOf<DataT>::format, glTypeOf<DataT>::type, data#if $hasMipmaps #, mipmapLevel#end if #);
        }
        /// Same as above
        /// Usage:
        ///   glm::vec3 texData[][] = { ... }
        ///   // it's #echo "".join(["[" + P + "]" for P in $sizeVarsReverse])#
        ///   setSubData(${offsetParameterCall}, texData);
        template <typename DataT, $sizeParameter>
        void setSubData(#if $cubemap #GLenum target, #end if #${offsetParameter}, const DataT(&data)#echo "".join(["[" + P + "]" for P in $sizeVarsReverse])# #if $hasMipmaps #, int mipmapLevel = 0#end if #)
        {
            setSubData(#if $cubemap #target, #end if #${offsetParameterCall}, ${sizeParameterCall}, glTypeOf<DataT>::format, glTypeOf<DataT>::type, data#if $hasMipmaps #, mipmapLevel#end if #);
        }

        /// Sets texture data from surface data
        /// May set multiple levels at once
        /// May modify texture parameter
        void setData(GLenum internalFormat, SharedTextureData const& data);

        /// Generic data download
        std::vector<char> getData(GLenum format, GLenum type#if $hasMipmaps #, int mipmapLevel = 0#end if #);
        /// Generic data download
        void getData(GLenum format, GLenum type, size_t bufferSize, void* buffer#if $hasMipmaps #, int mipmapLevel = 0#end if #);
        /// Data download via glm or c++ type (see gltypeinfo)
        template <typename DataT>
        std::vector<DataT> getData(int mipmapLevel = 0)
        {
            std::vector<DataT> data;
            data.resize(#echo " * ".join(["texture->m" + P for P in $sizeMember]) #);
            getData(glTypeOf<DataT>::format, glTypeOf<DataT>::type, data.size() * sizeof(DataT), data.data()#if $hasMipmaps #, mipmapLevel#end if #);
            return std::move(data);
        }

        /* TODO: OpenGL <4.5 does not support subimage retrieval (in 4.5, https://www.opengl.org/sdk/docs/man/html/glGetTextureSubImage.xhtml can be used)
        /// Generic partial data download
        std::vector<char> getSubData(GLenum format, GLenum type, ${offsetParameter}, ${sizeParameter}#if $hasMipmaps #, int mipmapLevel = 0#end if #);
        /// Generic partial data download
        void getSubData(GLenum format, GLenum type, ${offsetParameter}, ${sizeParameter}, size_t bufferSize, void* buffer#if $hasMipmaps #, int mipmapLevel = 0#end if #);
        /// Partial data download via glm or c++ type (see gltypeinfo)
        template <typename DataT>
        std::vector<DataT> getSubData(${offsetParameter}, ${sizeParameter}, int mipmapLevel = 0)
        {
            std::vector<DataT> data;
            data.resize(#echo " * ".join($sizeVars) #);
            getSubData(glTypeOf<DataT>::format, glTypeOf<DataT>::type, ${offsetParameterCall}, ${sizeParameterCall}, data.size() * sizeof(DataT), data.data()#if $hasMipmaps #, mipmapLevel#end if #);
            return std::move(data);
        }
        */

        /// Extracts all stored surface data#if $hasMipmaps# up to a given max mipmap level (inclusive)#end if#
        /// This is useful for saving the texture to a file
        SharedTextureData getTextureData(#if $hasMipmaps#int maxMipLevel = 1000#end if#);
        /// Same as getTextureData()->writeToFile(filename)
        void writeToFile(std::string const& filename);
#end if

    private:
        GLint previousTexture;              ///< previously bound tex
        Bound$class* previousTexturePtr; ///< previously bound tex
        Bound$class ($class* buffer);
        friend class $class;

        /// returns true iff it's safe to use this bound class
        /// otherwise, runtime error
        bool isCurrent() const;

    public:
        Bound$class (Bound$class &&); // allow move
        ~Bound$class ();
    };
public:

#if not $buffer
    /// Fills the specific mipmap level (default 0) with the given data
    /// Requires OpenGL 4.4 (for now) and will throw a run-time error otherwise
    void clear(GLenum format, GLenum type, const GLvoid* data#if $hasMipmaps #, int mipmapLevel = 0#end if #);
    /// Clear via glm or c++ type (see gltypeinfo)
    /// CAREFUL: pointers do not work!
    template <typename DataT>
    void clear(DataT const& data#if $hasMipmaps #, int mipmapLevel = 0#end if #)
    {
        clear(glTypeOf<DataT>::format, glTypeOf<DataT>::type, (const GLvoid*)&data#if $hasMipmaps #, mipmapLevel#end if #);
    }
#end if

public:
    ${class}(GLenum internalFormat = GL_RGBA);
    ${class}(Shape const& shape);

    /// Binds this texture.
    /// Unbinding is done when the returned object runs out of scope.
    GLOW_NODISCARD Bound$class bind() { return {this}; }
public: // static construction
    /// Creates $shortdesc with given width and height
    static Shared$class create($sizeParameterWithDefault, GLenum internalFormat = GL_RGBA);
    /// Creates $shortdesc from Shape
    static Shared$class create(Shape const& shape);
#if $storageDim > 1
    static Shared$class create(SizeT size, GLenum internalFormat = GL_RGBA) { return create($sizeExpandCall, internalFormat); }
#end if
#if $hasImmutable
    /// Creates $shortdesc with given width and height which is storage immutable
#if $hasMipmaps
    /// If mipmapLevels is <= 0, log2(max(width, height)) + 1 is used
#end if
    static Shared$class createStorageImmutable(${sizeParameter}, GLenum internalFormat#if $hasMipmaps#, int mipmapLevels = 0#end if#);
#if $storageDim > 1
    static Shared$class createStorageImmutable(SizeT size, GLenum internalFormat#if $hasMipmaps#, int mipmapLevels = 0#end if#) { return createStorageImmutable($sizeExpandCall, internalFormat#if $hasMipmaps#, mipmapLevels#end if#); }
#end if
    static Shared$class createStorageImmutable(Shape const& shape);
#end if

#if not $isMultisample
    /// Creates $shortdesc from file
    /// See TextureData::createFromFile for format documentation
    /// Uses preferred internal format
    static Shared$class createFromFile(std::string const& filename, ColorSpace colorSpace);
    /// same as createFromFile but with custom internal format
    static Shared$class createFromFile(std::string const& filename, GLenum internalFormat, ColorSpace colorSpace);

    /// Creates $shortdesc from given data
    /// Uses preferred internal format
    static Shared$class createFromData(SharedTextureData const& data);
    /// same as createFromData but with custom internal format
    static Shared$class createFromData(SharedTextureData const& data, GLenum internalFormat);
#end if

    friend class Framebuffer;
};
}
